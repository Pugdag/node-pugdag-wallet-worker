export declare type Colorable = 'time' | 'name' | 'level' | 'content' | 'prefix' | 'all';
export declare type Displayable = 'time' | 'name' | 'level' | 'all';
export interface LogLevelToId {
    [key: string]: number;
}
export interface LogLevelToColor {
    [key: string]: string;
}
export interface ProfileMap {
    [key: string]: number;
}
export declare type SinkFn = (obj: any) => boolean;
export interface FlowLoggerOptions {
    sink?: SinkFn;
    levels?: string[];
    display?: Displayable[];
    custom?: Record<string, string> | string[];
    color?: Colorable[];
}
export interface FlowLoggerOpt {
    sink?: SinkFn;
    levels: string[];
    display: Displayable[];
    custom: Record<string, string> | string[];
    color: Colorable[];
}
export declare class FlowLogger {
    [key: string]: any;
    prefix_ui32: number;
    prefix_color_ui32: number;
    color_content: boolean;
    level_bits: number;
    to_id: LogLevelToId;
    to_color: LogLevelToColor;
    levels_ui32_: number;
    sink: SinkFn | undefined;
    profiles: ProfileMap;
    static getTS(): string;
    constructor(name: string, options?: FlowLoggerOptions);
    create(descriptor: [string, string]): this;
    levels_to_ui32(levels: string[]): number;
    setLevel(levels: string | string[]): FlowLogger;
    enable(levels: string | string[]): FlowLogger;
    disable(levels: string | string[]): FlowLogger;
    relayTo(sink: SinkFn): void;
    log_(level: string, ...args: any[]): FlowLogger;
    trace(...args: any[]): this;
    tag(subject: string): void;
    profile(subject: string, ...args: any[]): number;
}
//# sourceMappingURL=flow-logger.d.ts.map