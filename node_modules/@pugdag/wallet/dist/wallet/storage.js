"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Storage = void 0;
const logger_1 = require("../utils/logger");
const helper_1 = require("../utils/helper");
const IS_NODE = typeof process === 'object'
    && typeof process.versions === 'object'
    && typeof process.versions.node === 'string';
class DBInterface {
}
const classes = {};
class LSDB extends DBInterface {
    constructor(opt = {}) {
        super();
        this.LS = window.localStorage;
    }
    backup() {
        let data = this.getWallet();
        if (!data)
            return;
        let ts = Date.now();
        this.LS.setItem("pugdag-wallet-" + ts, data);
        let cache = this.getCache();
        if (cache)
            this.LS.setItem("pugdag-cache-" + ts, cache);
    }
    saveWallet(data) {
        this.LS.setItem("pugdag-wallet", data);
    }
    getWallet() {
        return this.LS.getItem("pugdag-wallet");
    }
    saveCache(cache) {
        return this.LS.setItem("pugdag-cache", cache);
    }
    getCache() {
        return this.LS.getItem("pugdag-cache");
    }
}
classes.LSDB = LSDB;
if (IS_NODE) {
    const path = require("path");
    const os = require("os");
    const fs = require("fs");
    class FileDB extends DBInterface {
        constructor(opt = {}) {
            super();
            let { fileName = "pugdag", folder } = opt;
            this.fileName = fileName;
            this.folder = folder || this.getHomeFolder();
            if (!fs.existsSync(this.folder))
                fs.mkdirSync(this.folder, { recursive: true });
            this.walletFile = this.createFilePath('kpk');
            this.txFile = this.createFilePath('ktx');
            this.cacheFile = this.createFilePath('cache');
        }
        createFilePath(ext = 'kpk', suffix = '') {
            return path.join(this.folder, `${this.fileName}${suffix}.${ext}`);
        }
        getHomeFolder() {
            let { APPDATA, HOME } = process.env;
            if (!HOME)
                HOME = os.homedir();
            if (APPDATA) // windows
                return path.join(APPDATA, 'Pugdag');
            if (process.platform == 'darwin')
                return path.join(HOME, '/Library/Application Support/Pugdag/');
            return path.join(HOME, '.pugdag');
        }
        backup() {
            let bk = '-backup-' + (0, helper_1.UID)("-");
            if (fs.existsSync(this.walletFile)) {
                let newPath = this.createFilePath('kpk', bk);
                fs.renameSync(this.walletFile, newPath);
            }
            if (fs.existsSync(this.txFile)) {
                let newPath = this.createFilePath('ktx', bk);
                fs.renameSync(this.txFile, newPath);
            }
            if (fs.existsSync(this.cacheFile)) {
                let newPath = this.createFilePath('cache', bk);
                fs.renameSync(this.cacheFile, newPath);
            }
        }
        saveWallet(data) {
            fs.writeFileSync(this.walletFile, data);
        }
        getWallet() {
            if (fs.existsSync(this.walletFile))
                return fs.readFileSync(this.walletFile) + "";
            return false;
        }
        saveCache(cache) {
            return fs.writeFileSync(this.cacheFile, cache);
        }
        getCache() {
            if (fs.existsSync(this.cacheFile))
                return fs.readFileSync(this.cacheFile) + "";
            return undefined;
        }
    }
    classes.FileDB = FileDB;
}
class Storage {
    constructor(opt = {}) {
        this.logger = (0, logger_1.CreateLogger)("PugdagStorage");
        const { fileDbOptions = {} } = opt;
        if (opt.logLevel)
            this.setLogLevel(opt.logLevel);
        if (IS_NODE) {
            this.db = new classes.FileDB(fileDbOptions);
        }
        else {
            this.db = new classes.LSDB();
        }
    }
    /*
    * @return {String|Buffer} wallet
    */
    getWallet() {
        let content = this.db.getWallet();
        if (!content)
            return false;
        try {
            return JSON.parse(content);
        }
        catch (e) {
            return false;
        }
    }
    _buildWalletContent(mnemonic, meta = {}) {
        return Object.assign({
            type: "pugdag-wallet",
            encryption: "default",
            version: 1,
            generator: "cli",
            wallet: {
                mnemonic
            }
        }, meta || {});
    }
    createWallet(mnemonic, meta = {}) {
        //this.logger.debug("createWallet:", wallet)
        this.db.backup();
        this.db.saveCache('');
        return this.saveWallet(mnemonic, meta);
    }
    saveWallet(mnemonic, meta = {}) {
        //this.logger.debug("saveWallet:", wallet)
        let wallet = this._buildWalletContent(mnemonic, meta);
        let json = JSON.stringify(wallet);
        return this.db.saveWallet(json);
    }
    /*
    * @return {WalletCache|undefined} cache
    */
    getCache() {
        let cache = this.db.getCache();
        if (!cache)
            return false;
        try {
            return JSON.parse(cache);
        }
        catch (e) {
            return false;
        }
    }
    saveCache(cache) {
        let data = JSON.stringify(cache);
        this.db.saveCache(data);
    }
    setLogLevel(level) {
        this.logger.setLevel(level);
    }
    addTransaction(tx) {
    }
}
exports.Storage = Storage;
//# sourceMappingURL=data:application/json;base64,