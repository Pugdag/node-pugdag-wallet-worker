"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC = exports.Client = exports.UID = void 0;
const UID = () => (Math.random() * 100000).toFixed(0) + Date.now();
exports.UID = UID;
class Client {
    constructor(core, options = {}) {
        this.callbacks = new Map();
        this.subscribers = new Map();
        this.pending = new Map();
        this.verbose = false;
        this.core = core;
        this.log = Function.prototype.bind.call(console.log, console, `[Pugdag gRPCProxy]:`);
        //seperate callback for direct function
        this.core.on('rpc-direct', (msg) => {
            const { rid, result } = msg;
            let CB = this.callbacks.get(rid);
            this.log("rpc-direct", rid, result, CB);
            if (!CB)
                return;
            CB(result);
        });
        this.core.on('rpc-response', (msg) => {
            const { rid, result, error } = msg;
            let pending = this.pending.get(rid);
            if (!pending)
                return;
            pending.cb(error, result);
            this.pending.delete(rid);
        });
        this.core.on('rpc-publish', (msg) => {
            const { result, method } = msg;
            let eventName = this.subject2EventName(method);
            this.verbose && this.log("subscribe:eventName", eventName);
            let subscribers = this.subscribers.get(eventName);
            if (!subscribers || !subscribers.length)
                return;
            subscribers.map(subscriber => {
                subscriber.callback(result);
            });
        });
    }
    cleanup() {
        this.callbacks.clear();
        this.subscribers.clear();
        this.pending.clear();
    }
    addCB(key, cb) {
        let uid = (0, exports.UID)();
        this.callbacks.set(uid, cb);
        return uid;
    }
    req(fn, args, rid = '') {
        this.core.postMessage("rpc-request", { fn, args, rid });
    }
    call(method, data = {}, type = "request", uid = undefined) {
        return new Promise((resolve, reject) => {
            let rid = uid || (0, exports.UID)();
            this.pending.set(rid, {
                method,
                cb: (error, result = undefined) => {
                    if (error)
                        return reject(error);
                    resolve(result);
                }
            });
            this.req(type, [method, data], rid);
        });
    }
    onConnect(callback) {
        let rid = this.addCB("onConnect", callback);
        this.req("onConnect", [], rid);
    }
    onDisconnect(callback) {
        let rid = this.addCB("onDisconnect", callback);
        this.req("onDisconnect", [], rid);
    }
    onConnectFailure(callback) {
        let rid = this.addCB("onConnectFailure", callback);
        this.req("onConnectFailure", [], rid);
    }
    onError(callback) {
        let rid = this.addCB("onError", callback);
        this.req("onError", [], rid);
    }
    disconnect() {
        this.req("disconnect", []);
    }
    connect() {
        this.req("connect", []);
    }
    subscribe(subject, data, callback) {
        let eventName = this.subject2EventName(subject);
        this.verbose && this.log("subscribe:eventName", eventName);
        let subscribers = this.subscribers.get(eventName);
        if (!subscribers) {
            subscribers = [];
            this.subscribers.set(eventName, subscribers);
        }
        let uid = (0, exports.UID)();
        subscribers.push({ uid, callback });
        let p = this.call(subject, data, "subscribe", uid);
        p.uid = uid;
        return p;
    }
    subject2EventName(subject) {
        let eventName = subject.replace("notify", "").replace("Request", "Notification");
        return eventName[0].toLowerCase() + eventName.substr(1);
    }
    unSubscribe(subject, uid = '') {
        this.req("unSubscribe", [subject, uid]);
        let eventName = this.subject2EventName(subject);
        let subscribers = this.subscribers.get(eventName);
        if (!subscribers)
            return;
        if (!uid) {
            this.subscribers.delete(eventName);
        }
        else {
            subscribers = subscribers.filter(sub => sub.uid != uid);
            this.subscribers.set(eventName, subscribers);
        }
    }
}
exports.Client = Client;
class RPC {
    cleanup() {
        this.client.cleanup();
    }
    constructor(options = {}) {
        this.client = options.client;
    }
    onConnect(callback) {
        this.client.onConnect(callback);
    }
    onConnectFailure(callback) {
        this.client.onConnectFailure(callback);
    }
    onError(callback) {
        this.client.onError(callback);
    }
    onDisconnect(callback) {
        this.client.onDisconnect(callback);
    }
    disconnect() {
        var _a;
        (_a = this.client) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    connect() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return (_a = this.client) === null || _a === void 0 ? void 0 : _a.connect();
        });
    }
    unSubscribe(method, uid = '') {
        return this.client.unSubscribe(method, uid);
    }
    subscribe(method, data, callback) {
        return this.client.subscribe(method, data, callback);
    }
    request(method, data) {
        return this.client.call(method, data);
    }
    subscribeChainChanged(callback) {
        return this.subscribe("notifyChainChangedRequest", {}, callback);
    }
    subscribeBlockAdded(callback) {
        return this.subscribe("notifyBlockAddedRequest", {}, callback);
    }
    subscribeVirtualSelectedParentBlueScoreChanged(callback) {
        return this.subscribe("notifyVirtualSelectedParentBlueScoreChangedRequest", {}, callback);
    }
    subscribeUtxosChanged(addresses, callback) {
        return this.subscribe("notifyUtxosChangedRequest", { addresses }, callback);
    }
    unSubscribeUtxosChanged(uid = '') {
        this.unSubscribe("notifyUtxosChangedRequest", uid);
    }
    getBlock(hash) {
        return this.request('getBlockRequest', { hash, includeBlockVerboseData: true });
    }
    getTransactionsByAddresses(startingBlockHash, addresses) {
        return this.request('getTransactionsByAddressesRequest', {
            startingBlockHash, addresses
        });
    }
    getUtxosByAddresses(addresses) {
        return this.request('getUtxosByAddressesRequest', { addresses });
    }
    submitTransaction(tx) {
        return this.request('submitTransactionRequest', tx);
    }
    getVirtualSelectedParentBlueScore() {
        return this.request('getVirtualSelectedParentBlueScoreRequest', {});
    }
    getBlockDagInfo() {
        return this.request('getBlockDagInfoRequest', {});
    }
    subscribeVirtualDaaScoreChanged(callback) {
        return this.subscribe("notifyVirtualDaaScoreChangedRequest", {}, callback);
    }
}
exports.RPC = RPC;
//# sourceMappingURL=data:application/json;base64,